require(extrafont)
loadfonts(device="postscript",fonts="serif")
#set locale
Sys.setlocale(category="LC_ALL",locale="da_DK")
#fv<-read_dta("~/Dropbox/Data/DES2015/fv15.dta")
fv<-read_dta("C:/Users/kzc744/Dropbox/Data/DES2015/fv15_v2.dta")
#fv<-read_dta("C:/Users/fh/Dropbox/Data/DES2015/fv15_v2.dta")
#fix mangled var names
names(fv)[195:197]
fixedvarnames<-gsub("\\\xe6","ae",names(fv)) %>%
gsub("\\\xf8","oe",.) %>%
gsub("\\\xe5","aa",.)
names(fv)<-fixedvarnames
#get labels data frame
labels<-fv %>%
lapply(.,attr,which="label") %>%
unlist() %>%
as.data.frame()
labels<-labels %>% transmute(varname=rownames(labels),label=labels[,1])
#convert to data frame
fv<-as.data.frame(fv)
### POSITION OF ONESELF
str(fv[,1:60])
partyseq<-c("sd","rv","kf","sf","la","kd","df","ve","el","al")
table(fv$q15)
placbyp<-fv %>%
transmute(selfplac=ifelse(q70a<11,q70a,NA),
partynum=ifelse(q15<11,q15,NA))
placbyp$partylab<-NA
placbyp$partylab[placbyp$partynum==1]<-"S"
placbyp$partylab[placbyp$partynum==2]<-"RV"
placbyp$partylab[placbyp$partynum==3]<-"K"
placbyp$partylab[placbyp$partynum==4]<-"SF"
placbyp$partylab[placbyp$partynum==5]<-"LA"
placbyp$partylab[placbyp$partynum==6]<-"KR"
placbyp$partylab[placbyp$partynum==7]<-"DF"
placbyp$partylab[placbyp$partynum==8]<-"V"
placbyp$partylab[placbyp$partynum==9]<-"Enh."
placbyp$partylab[placbyp$partynum==10]<-"Alt."
#remove christian democrats and NA's
placbyp<-filter(placbyp,!is.na(partynum) & partynum!=6)
prop.table(table(placbyp$partylab,placbyp$selfplac<5),1)
#figure out avg placement rank
placbyp<-placbyp %>%
filter(!is.na(selfplac)) %>%
group_by(partylab) %>%
summarise(avgpos=mean(selfplac)) %>%
arrange(desc(avgpos)) %>%
mutate(rank=1:9) %>%
left_join(placbyp,.,by="partylab") %>%
mutate(partylabfac=reorder(factor(partylab),rank)) %>%
filter(!is.na(selfplac))
#create function for danish comma format
gcomma <- function(x) format(x, ..., big.mark=".",decimal.mark=",", scientific = FALSE)
ggplot(placbyp,aes(x=selfplac,fill=partylabfac)) +
#  geom_bar(color=1) +
geom_density(adjust=1.5) +
geom_vline(aes(xintercept=avgpos),size=.7) +
facet_grid(partylabfac~.,scale="free_y") +
labs(x="Vælgeres selvplacering",y="") +
scale_x_continuous(breaks=c(0,2.5,5,7.5,10),labels=c("0","2,5","5","7,5","10")) +
scale_y_continuous(breaks=NULL) +
theme_bw() +
theme(legend.position="none") +
scale_fill_grey(start=.4,end=.95) +
theme(text=element_text(family="serif"))
ggsave("fig101.pdf",width=7,height=6)
ggsave("fig101.png",width=6,height=6)
ggsave("fig101_hires.png",width=10,height=10,dpi=300)
#get n's
table(placbyp$partylab)
### POSITIONS OF PARTIES
#placing parties position on refugees, q71, is n2_1-n2_10
#q72, pub sector, is q1_1-q1_10
#q73, green, q2_1-q2_10
#q74, punish, r1_1-r1_10
#q75, equal, r2_1-r2_10
#sequence of party names
partyseq10<-c("sd","rv","kf","sf","la","kd","df","ve","el","al")
length(partyseq)
partyseq<-partyseq10[-6] #take out kd
#create separate data frames for each issue
refu<-select(fv,q71a:q71i)
names(refu)<-partyseq
refu<-gather(refu) %>%
transmute(party=key,pos=ifelse(value<6,(value-5)*-10/4,NA))
spnd<-select(fv,q72a:q72i)
names(spnd)<-partyseq
spnd<-gather(spnd) %>%
transmute(party=key,pos=ifelse(value<6,(value-5)*-10/4,NA))
gree<-select(fv,q73a:q73i)
names(gree)<-partyseq
gree<-gather(gree) %>%
transmute(party=key,pos=ifelse(value<6,(value-5)*-10/4,NA))
puni<-select(fv,q74a:q74i)
names(puni)<-partyseq
puni<-gather(puni) %>%
transmute(party=key,pos=ifelse(value<6,(value-5)*-10/4,NA))
ineq<-select(fv,q75a:q75i)
names(ineq)<-partyseq
ineq<-gather(ineq) %>%
transmute(party=key,pos=ifelse(value<6,(value-1)*10/4,NA))
#gather into old and news issues
spndns<-spnd %>%
group_by(party) %>%
summarise(n=sum(!is.na(pos))) %>%
select(2)
ineqns<-ineq %>%
group_by(party) %>%
summarise(n=sum(!is.na(pos))) %>%
select(2)
oldns<-spndns %>%
bind_cols(.,ineqns) %>%
apply(.,1,min)
oldlr<-rbind(spnd,ineq) %>%
mutate(q=rep(1:2,each=nrow(spnd))) %>%
group_by(party) %>%
summarise(oldpos=mean(pos,na.rm=T),oldsd=sd(pos,na.rm=T)) %>%
mutate(oldn=oldns) %>%
mutate(oldse=oldsd/sqrt(oldn))
refuns<-refu %>%
group_by(party) %>%
summarise(n=sum(!is.na(pos))) %>%
select(2)
greens<-gree %>%
group_by(party) %>%
summarise(n=sum(!is.na(pos))) %>%
select(2)
punins<-puni %>%
group_by(party) %>%
summarise(n=sum(!is.na(pos))) %>%
select(2)
newns<-refuns %>%
bind_cols(.,greens) %>%
bind_cols(.,punins) %>%
apply(.,1,min)
newlr<-rbind(refu,gree,puni) %>%
group_by(party) %>%
summarise(newpos=mean(pos,na.rm=T),newsd=sd(pos,na.rm=T)) %>%
mutate(newn=newns) %>%
mutate(newse=newsd/sqrt(newn))
#gather dimensions
alllr<-oldlr %>%
left_join(.,newlr,by="party") %>%
select(party,oldpos,oldse,newpos,newse) %>%
filter(party!="kd") %>%
mutate(longparty=c("Alternativet","Dansk Folkeparti","Enhedslisten","Det Konservative Folkeparti","Liberal Alliance",
"Radikale Venstre","Socialdemokraterne","Socialistisk Folkeparti","Venstre"),
vj=c(-1,-1,-1,-1,1,-1,1,-1,-1),
hj=c(0.5,0.5,0.5,0.5,0,0.5,1,0.5,0.5))
alllr
summary(oldlr$oldn)
summary(newlr$newn)
ggplot(alllr,aes(x=oldpos,y=newpos)) +
geom_errorbar(aes(ymin=newpos-1.96*newse,ymax=newpos+1.96*newse),width=0,color="gray60") +
geom_errorbarh(aes(xmin=oldpos-1.96*oldse,xmax=oldpos+1.96*oldse),height=0,color="gray60") +
geom_text_repel(aes(label=longparty),segment.color="gray60",family="serif") +
geom_point() +
theme_bw() +
scale_x_continuous(breaks=c(0,2.5,5,7.5,10),labels=c("0","2,5","5","7,5","10"),limits=c(0,10)) +
scale_y_continuous(breaks=c(0,2.5,5,7.5,10),labels=c("0","2,5","5","7,5","10"),limits=c(0,10)) +
labs(x="Fordelingspolitisk venstre/højre",y="Værdipolitisk venstre/højre") +
theme(text=element_text(family="serif"))
ggsave("fig102.pdf",width=8,height=8)
ggsave("fig102.png",width=8,height=8)
ggsave("fig102_hires.png",width=10,height=10,dpi=300)
### POSITIONS OF EACH PARTY'S VOTERS
#cleanup
rm(list=setdiff(ls(), c("fv","partyseq10","alllr","placbyp")))
dims<-fv %>%
select(q15,q59aa,q59an,q59at,q59ae,q59af,q59ag,q59ai) %>%
filter(!is.na(q15)) %>%
transmute(partynum=as.numeric(q15),
indt=ifelse(q59aa<6,(q59aa-1)/4,NA),
vilk=ifelse(q59an<6,(q59an-1)/4,NA),
kntr=ifelse(q59at<6,(q59at-1)/4,NA),
indv1=ifelse(q59ae<6,(q59ae-5)/-4,0),
indv2=ifelse(q59af<6,(q59af-5)/-4,0),
vkst=ifelse(q59ag<6,(q59ai-5)/-4,NA),
strf=ifelse(q59ai<6,(q59ai-5)/-4,NA)) %>%
mutate(indv=ifelse(!is.na(indv1),indv1,indv2)) %>%
select(-indv1,-indv2)
dims$fdim=rowMeans(select(dims,indt,vilk,kntr),na.rm=T)
dims$vdim=rowMeans(select(dims,vkst,strf,indv),na.rm=T)
partymerger<-data.frame(partynum=1:10,partyname=partyseq10)
dims<-left_join(dims,partymerger,by="partynum")
partyseq<-partyseq10[-6]
dimsum<-dims %>%
group_by(partyname) %>%
summarise(fmean=10*mean(fdim,na.rm=T),vmean=10*mean(vdim,na.rm=T),
fn=length(fdim),vn=length(vdim),
fsdev=sd(fdim,na.rm=T),vsdev=sd(fdim,na.rm=T)) %>%
mutate(fse=10*fsdev/sqrt(fn),vse=10*vsdev/sqrt(vn)) %>%
filter(partyname %in% partyseq) %>%
left_join(.,partymerger,by="partyname") %>%
arrange(partynum) %>%
mutate(longparty=c("Socialdemokraterne","Radikale Venstre","Konservative","Socialistisk Folkeparti",
"Liberal Alliance","Dansk Folkeparti","Venstre","Enhedslisten","Alternativet"),
vj=c(-1,-1,-1,-1,1,-1,-1,-1,1),
hj=c(-.1,-.1,-.1,-.1,-.1,-.1,-.1,1.1,-.1)) %>%
select(-fsdev,-vsdev)
ggplot(dimsum,aes(x=fmean,y=vmean)) +
geom_errorbar(aes(ymin=vmean-1.96*vse,ymax=vmean+1.96*vse),width=0,size=.5,color="gray60") +
geom_errorbarh(aes(xmin=fmean-1.96*fse,xmax=fmean+1.96*fse),height=0,size=.5,color="gray60") +
#  geom_errorbar(aes(ymin=vmean-1.65*vse,ymax=vmean+1.65*vse),width=0,size=.8,color="gray60") +
#  geom_errorbarh(aes(xmin=fmean-1.65*fse,xmax=fmean+1.65*fse),height=0,size=.8,color="gray60") +
geom_text_repel(aes(label=longparty),segment.color="gray60",family="serif") +
#  geom_label_repel(aes(label=longparty)) +
geom_point() +
theme_bw() +
scale_x_continuous(breaks=c(0,2.5,5,7.5,10),labels=c("0","2,5","5","7,5","10"),limits=c(0,10)) +
scale_y_continuous(breaks=c(0,2.5,5,7.5,10),labels=c("0","2,5","5","7,5","10"),limits=c(0,10)) +
labs(x="Fordelingspolitisk venstre/højre",y="Værdipolitisk venstre/højre",size=2) +
theme(text=element_text(family="serif"))
ggsave("fig103.pdf",width=8,height=8)
ggsave("fig103.png",width=8,height=8)
ggsave("fig103_hires.png",width=10,height=10,dpi=300)
library(ggplot2)
library(zoo)
library(stargazer)
library(gridExtra)
library(reshape2)
library(effects)
#win
setwd("~/GitHub/thesis/rawdata")
#mac
#setwd("~/Google Drive/InProgress/ParliamentBias")
############################
# JUMP TO LINE 300
############################
library(ggplot2)
library(zoo)
library(stargazer)
library(gridExtra)
library(reshape2)
library(effects)
#win
setwd("~/GitHub/thesis/rawdata")
#mac
#setwd("~/Google Drive/InProgress/ParliamentBias")
############################
# JUMP TO LINE 300
############################
#get 2014 documents (different format)
require(XML)
doc <- htmlParse("afdb14.htm", useInternalNodes=T)
content <- doc["//meta/@content"]
content<-as.character(content[33:9764]) #this part is the actual debate
ftab14af<-data.frame(1:length(content),rawcontent=content)
#remove later date stamps
require(lubridate)
ftab14af$isstamp<-ifelse(substr(ftab14af$rawcontent,1,4)=="2014",1,0)
ftab14af$date<-ifelse(ftab14af$isstamp==1,ymd(substr(ftab14af$rawcontent,1,10)),NA)
ftab14af$laterdate<-ifelse(ftab14af$date>ftab14af$date[8],1,0)
ftab14af$laterdate[is.na(ftab14af$laterdate)]<-0
ftab14af<-subset(ftab14af,laterdate!=1 & rawcontent!="Proofed")
#shift function for lag/leads (crazy that this isn't in base R)
shift<-function(x,shift_by){
stopifnot(is.numeric(shift_by))
stopifnot(is.numeric(x))
if (length(shift_by)>1)
return(sapply(shift_by,shift, x=x))
out<-NULL
abs_shift_by=abs(shift_by)
if (shift_by > 0 )
out<-c(tail(x,-abs_shift_by),rep(NA,abs_shift_by))
else if (shift_by < 0 )
out<-c(rep(NA,abs_shift_by), head(x,-abs_shift_by))
else
out<-x
out
}
ftab14af$midstamp<-ifelse(shift(ftab14af$isstamp,1)==1 & shift(ftab14af$isstamp,-1)==1,1,0)
ftab14af<-subset(ftab14af,midstamp==0)
#find breaks (easier to handle manually)
as.numeric(rownames(subset(test,content=="Pause")))
breakrows<-c(1688:1695,5882:5889)
#remove breakrows
ftab14af<-ftab14af[-breakrows,]
#merge in variable names
fields<-c("speakerID","firstname","lastname","party","title","starttime","endtime")
ftab14af<-data.frame(field=c(rep(fields,nrow(ftab14af)/length(fields))),content=ftab14af$rawcontent)
#cast to wide form
require(reshape2)
ftab14af$obs<-sort(rep(1:(nrow(ftab14af)/length(fields)),length(fields)))
ftab14af<-dcast(ftab14af,obs~field,value.var="content")
#parse html documents
ftab11af<-readLines("afdb11.html",encoding="UTF-8")
ftab12af<-readLines("afdb12.htm",encoding="UTF-8")
ftab13af<-readLines("afdb13.htm",encoding="UTF-8")
ftab10ab<-readLines("abdb10.htm",encoding="UTF-8")
ftab11ab<-readLines("abdb11.htm",encoding="UTF-8")
ftab12ab<-readLines("abdb12.htm",encoding="UTF-8")
ftab13ab<-readLines("abdb13.htm",encoding="UTF-8")
ftab11af[100:125]
ftab12af[100:125]
ftab13af[100:125]
ftab10ab[1:150]
ftab11ab[95:105]
ftab12ab[95:105]
ftab13ab[95:105]
#start at which line?
lstartaf<-115
lstartab<-100
#how many speeches?
nspeechs11af<-1225
nspeechs12af<-1309
nspeechs13af<-1533
nspeechs10ab<-999
nspeechs11ab<-1372
nspeechs12ab<-1077
nspeechs13ab<-1289
#which lines to read?
speechlines11af<-seq(from=lstartaf+3,to=lstartaf+3+nspeechs11af*2-4,by=2)
speechlines12af<-seq(from=lstartaf,to=lstartaf+nspeechs12af*2-4,by=2)
speechlines13af<-seq(from=lstartaf,to=lstartaf+nspeechs13af*2-4,by=2)
speechlines10ab<-seq(from=lstartab,to=lstartab+nspeechs10ab*2-4,by=2)
speechlines11ab<-seq(from=lstartab,to=lstartab+nspeechs11ab*2-4,by=2)
speechlines12ab<-seq(from=lstartab,to=lstartab+nspeechs12ab*2-4,by=2)
speechlines13ab<-seq(from=lstartab,to=lstartab+nspeechs13ab*2-4,by=2)
#parse out speechitems
ftab<-c(ftab10ab[speechlines10ab],ftab11af[speechlines11af],ftab11ab[speechlines11ab],ftab12af[speechlines12af],ftab12ab[speechlines12ab],ftab13af[speechlines13af],ftab13ab[speechlines13ab])
ftabaf<-c(ftab11af[speechlines11af],ftab12af[speechlines12af],ftab13af[speechlines13af])
write(ftab,file="ftab.txt")
#remove other objects
rm(ftab10ab,ftab11ab,ftab11af,ftab12ab,ftab12af,ftab13af,ftab13ab)
#clean up
ftab<-gsub("new SpeachItem","",ftab,fixed=T)
ftab<-gsub("\"","",ftab,fixed=T)
strsplit(ftab[1],",")
#create data
ftdt<-data.frame(no=seq(1:length(ftab)))
ftdt$statxt<-as.character("")
ftdt$endtxt<-as.character("")
ftdt$spktxt<-as.character("")
ftdt$type<-as.character("")
strsplit(ftab[20],",")[[1]]
strsplit(ftab[20],",")[[1]][3]
strsplit(ftab[20],",")[[1]][5]
strsplit(ftab[20],",")[[1]][6]
for (i in 1:nrow(ftdt)){
ftdt$statxt[i]<-strsplit(ftab[i],",")[[1]][3]
ftdt$endtxt[i]<-strsplit(ftab[i],",")[[1]][4]
ftdt$spktxt[i]<-strsplit(ftab[i],",")[[1]][5]
ftdt$type[i]<-strsplit(ftab[i],",")[[1]][6]
}
#reformat non-ascii letters - we need this for later
ftdt$spktxt<-gsub("æ","ae",ftdt$spktxt)
ftdt$spktxt<-gsub("ø","oe",ftdt$spktxt)
ftdt$spktxt<-gsub("å","aa",ftdt$spktxt)
ftdt$spktxt<-gsub("Æ","Ae",ftdt$spktxt)
ftdt$spktxt<-gsub("Ø","Oe",ftdt$spktxt)
ftdt$spktxt<-gsub("Å","Aa",ftdt$spktxt)
ftdt$type<-gsub("æ","ae",ftdt$type)
ftdt$type<-gsub("ø","oe",ftdt$type)
#clean up speech type variable
ftdt$type<-gsub(")","",ftdt$type)
#get speech length in secs
ftdt$secs<-as.numeric(strptime(ftdt$endtxt,"%Y/%m/%d %T")-strptime(ftdt$statxt,"%Y/%m/%d %T"))
library(ggplot2)
library(zoo)
library(stargazer)
library(gridExtra)
library(reshape2)
library(effects)
#win
setwd("~/GitHub/parlbias/rawdata")
#mac
#setwd("~/Google Drive/InProgress/ParliamentBias")
############################
# JUMP TO LINE 300
############################
#get 2014 documents (different format)
require(XML)
doc <- htmlParse("afdb14.htm", useInternalNodes=T)
content <- doc["//meta/@content"]
content<-as.character(content[33:9764]) #this part is the actual debate
ftab14af<-data.frame(1:length(content),rawcontent=content)
#remove later date stamps
require(lubridate)
ftab14af$isstamp<-ifelse(substr(ftab14af$rawcontent,1,4)=="2014",1,0)
ftab14af$date<-ifelse(ftab14af$isstamp==1,ymd(substr(ftab14af$rawcontent,1,10)),NA)
ftab14af$laterdate<-ifelse(ftab14af$date>ftab14af$date[8],1,0)
ftab14af$laterdate[is.na(ftab14af$laterdate)]<-0
ftab14af<-subset(ftab14af,laterdate!=1 & rawcontent!="Proofed")
library(ggplot2)
library(zoo)
library(stargazer)
library(gridExtra)
library(reshape2)
library(effects)
#win
setwd("~/GitHub/parlbias/rawdata")
#mac
#setwd("~/Google Drive/InProgress/ParliamentBias")
############################
# JUMP TO LINE 300
############################
#get 2014 documents (different format)
require(XML)
doc <- htmlParse("afdb14.htm", useInternalNodes=T)
content <- doc["//meta/@content"]
content<-as.character(content[33:9764]) #this part is the actual debate
ftab14af<-data.frame(1:length(content),rawcontent=content)
#remove later date stamps
require(lubridate)
ftab14af$isstamp<-ifelse(substr(ftab14af$rawcontent,1,4)=="2014",1,0)
ftab14af$date<-ifelse(ftab14af$isstamp==1,ymd(substr(ftab14af$rawcontent,1,10)),NA)
ftab14af$laterdate<-ifelse(ftab14af$date>ftab14af$date[8],1,0)
ftab14af$laterdate[is.na(ftab14af$laterdate)]<-0
ftab14af<-subset(ftab14af,laterdate!=1 & rawcontent!="Proofed")
#shift function for lag/leads (crazy that this isn't in base R)
shift<-function(x,shift_by){
stopifnot(is.numeric(shift_by))
stopifnot(is.numeric(x))
if (length(shift_by)>1)
return(sapply(shift_by,shift, x=x))
out<-NULL
abs_shift_by=abs(shift_by)
if (shift_by > 0 )
out<-c(tail(x,-abs_shift_by),rep(NA,abs_shift_by))
else if (shift_by < 0 )
out<-c(rep(NA,abs_shift_by), head(x,-abs_shift_by))
else
out<-x
out
}
ftab14af$midstamp<-ifelse(shift(ftab14af$isstamp,1)==1 & shift(ftab14af$isstamp,-1)==1,1,0)
ftab14af<-subset(ftab14af,midstamp==0)
#find breaks (easier to handle manually)
as.numeric(rownames(subset(test,content=="Pause")))
breakrows<-c(1688:1695,5882:5889)
#remove breakrows
ftab14af<-ftab14af[-breakrows,]
#merge in variable names
fields<-c("speakerID","firstname","lastname","party","title","starttime","endtime")
ftab14af<-data.frame(field=c(rep(fields,nrow(ftab14af)/length(fields))),content=ftab14af$rawcontent)
#cast to wide form
require(reshape2)
ftab14af$obs<-sort(rep(1:(nrow(ftab14af)/length(fields)),length(fields)))
ftab14af<-dcast(ftab14af,obs~field,value.var="content")
#parse html documents
ftab11af<-readLines("afdb11.html",encoding="UTF-8")
ftab12af<-readLines("afdb12.htm",encoding="UTF-8")
ftab13af<-readLines("afdb13.htm",encoding="UTF-8")
ftab10ab<-readLines("abdb10.htm",encoding="UTF-8")
ftab11ab<-readLines("abdb11.htm",encoding="UTF-8")
ftab12ab<-readLines("abdb12.htm",encoding="UTF-8")
ftab13ab<-readLines("abdb13.htm",encoding="UTF-8")
ftab11af[100:125]
ftab12af[100:125]
ftab13af[100:125]
ftab10ab[1:150]
ftab11ab[95:105]
ftab12ab[95:105]
ftab13ab[95:105]
#start at which line?
lstartaf<-115
lstartab<-100
#how many speeches?
nspeechs11af<-1225
nspeechs12af<-1309
nspeechs13af<-1533
nspeechs10ab<-999
nspeechs11ab<-1372
nspeechs12ab<-1077
nspeechs13ab<-1289
#which lines to read?
speechlines11af<-seq(from=lstartaf+3,to=lstartaf+3+nspeechs11af*2-4,by=2)
speechlines12af<-seq(from=lstartaf,to=lstartaf+nspeechs12af*2-4,by=2)
speechlines13af<-seq(from=lstartaf,to=lstartaf+nspeechs13af*2-4,by=2)
speechlines10ab<-seq(from=lstartab,to=lstartab+nspeechs10ab*2-4,by=2)
speechlines11ab<-seq(from=lstartab,to=lstartab+nspeechs11ab*2-4,by=2)
speechlines12ab<-seq(from=lstartab,to=lstartab+nspeechs12ab*2-4,by=2)
speechlines13ab<-seq(from=lstartab,to=lstartab+nspeechs13ab*2-4,by=2)
#parse out speechitems
ftab<-c(ftab10ab[speechlines10ab],ftab11af[speechlines11af],ftab11ab[speechlines11ab],ftab12af[speechlines12af],ftab12ab[speechlines12ab],ftab13af[speechlines13af],ftab13ab[speechlines13ab])
ftabaf<-c(ftab11af[speechlines11af],ftab12af[speechlines12af],ftab13af[speechlines13af])
write(ftab,file="ftab.txt")
#remove other objects
rm(ftab10ab,ftab11ab,ftab11af,ftab12ab,ftab12af,ftab13af,ftab13ab)
#clean up
ftab<-gsub("new SpeachItem","",ftab,fixed=T)
ftab<-gsub("\"","",ftab,fixed=T)
strsplit(ftab[1],",")
#create data
ftdt<-data.frame(no=seq(1:length(ftab)))
ftdt$statxt<-as.character("")
ftdt$endtxt<-as.character("")
ftdt$spktxt<-as.character("")
ftdt$type<-as.character("")
strsplit(ftab[20],",")[[1]]
strsplit(ftab[20],",")[[1]][3]
strsplit(ftab[20],",")[[1]][5]
strsplit(ftab[20],",")[[1]][6]
View(ftdt)
View(ftdt)
strsplit(ftab[20],",")[[1]]
strsplit(ftab[20],",")[[1]][3]
strsplit(ftab[20],",")[[1]][5]
strsplit(ftab[20],",")[[1]][6]
1:10
df1<-data.frame(x=rnorm(100),y=rnorm(100))
require(gpplot2)
require(ggplot2)
ggplot(df1,aes(x,y)) + geom_point()
df2<-data.frame(x=rnorm(100),y=rnorm(100))
df3<-data.frame(x=rnorm(100),y=rnorm(100))
dfall<-rbind(df1,df2,df3)
dfall$source<-rep(c("one","two","three"),each=100)
View(dfall)
ggplot(dfall,aes(x,y)) + geom_point() + facet_grid(.~source)
